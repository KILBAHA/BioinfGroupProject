setwd("~/Documents/GitHub/BioinfGroupProject/rank_cluster_2/k6")
clinDat = read.csv("data_clinical_patient.txt", sep = "\t", skip = 4)
clinNames= clinDat[,1]
clinDat = clinDat[,2:ncol(clinDat)]
name_fix = c()
for(name in clinNames){name_fix = c(name_fix,substr(name,11,nchar(name)))}
rownames(clinDat) = name_fix
num_pie = function(dat, tit){
lbs = unique(dat)
vls = c()
for (lb in lbs){
vls = c(vls, sum(dat== lb))
}
pie(vls, labels = lbs, main = tit)
}
get_prop = function(dat, atrib){
return(length(dat[dat == atrib])/length(dat) * 100)
}
plot_cls = function(clst_num, cdat = clinDat){
clst = as.vector(read.table(paste("c",clst_num,".txt", sep = "")))
clstDat = clinDat[rownames(clinDat) %in% clst$V1,]
par(mfrow=c(3,3))
clst_stat = data.frame(Age = mean(clstDat$AGE_IN_DAYS, na.rm = T),
EFS = mean(clstDat$EFS_TIME, na.rm=T),
"% Male" = get_prop(clstDat$SEX, "Male"),
"% White" = get_prop(clstDat$RACE, "White"),
"% High_Risk" = get_prop(clstDat$RISK_GROUP, "High Risk"),
"% INSS_Stage_4" = get_prop(clstDat$INSS_STAGE, "Stage 4"),
"% Unfavourable_Histology" =get_prop(clstDat$TUMOR_SAMPLE_HISTOLOGY, "Unfavorable"),
"% Neuroblastoma_Diagnosis"=get_prop(clstDat$DIAGNOSIS, "Neuroblastoma"))
hist(clstDat$AGE, main = paste("Age cluster", clst_num), breaks = max(clstDat$AGE)-1)
abline(v=median(clstDat$AGE), col = "blue", lwd = 2)
num_pie(clstDat$SEX, tit = paste("Sex cluster", clst_num))
hist(clstDat$EFS_TIME, xlab = "EFS Time (days)", main = paste("EFS Time cluster", clst_num))
abline(v=median(clstDat$EFS_TIME, na.rm = TRUE), col = "blue", lwd = 2)
hist(clstDat$AGE_IN_DAYS, xlab = "Age (days)", main = paste("Age (days) cluster", clst_num))
abline(v = median(clstDat$AGE_IN_DAYS), col = "blue", lwd = 2)
num_pie(clstDat$RACE, tit = paste("Race cluster", clst_num))
num_pie(clstDat$RISK_GROUP, tit = paste("Risk Group", clst_num))
#mtext(paste("Cluster ", clst_num, ":", sep =""), side = 3, line = -21, outer = TRUE)
#par(mfrow = c(1,3))
num_pie(clstDat$INSS_STAGE, tit = paste("INSS STAGE Cluster", clst_num))
num_pie(clstDat$TUMOR_SAMPLE_HISTOLOGY, tit = paste("Tumour Sample Histology Cluster", clst_num))
num_pie(clstDat$DIAGNOSIS, tit = paste("Diagnosis Cluster", clst_num))
return(clst_stat)
}
plot_clusters = function(clst_list){
allclst = data.frame()
for (clst in clst_list){
allclst = rbind(allclst, plot_cls(clst))
}
par(mfrow = c(2,2))
for(atrib in names(allclst)){
barplot(allclst[,atrib], main = atrib, names.arg = clst_list, xlab = "Clusters")
}
}
plot_clusters(c(1:6))
#plot_clusters(c(1,5,3,4,8,6,2,9,7))
#plot_clusters(c(8,2,1,3,4,5,6,7,9))
#Script used to generate the best k9 clusters determined by computer farm
library('flexclust') # handles weighted clustering
setwd("~/Documents/GitHub/BioinfGroupProject/rank_cluster_2")
#set.seed(255)
#read in and format counts (z_scores)
z_scores = read.csv("data_expression_median.txt", sep = "\t", stringsAsFactors = FALSE, header = TRUE)
map = z_scores[,c(1,2)]
inst_names = colnames(z_scores)[3:length(colnames(z_scores))]
z_scores = z_scores[,-2]
z_scores = as.data.frame(t(z_scores), stringsAsFactors = FALSE)
names(z_scores) = map[,1]
z_scores = z_scores[-1,]
z_scores = as.data.frame(apply(z_scores, 2, as.numeric))
name_fix = c()
for(name in inst_names){name_fix = c(name_fix,substr(name,11,nchar(name)-3))}
row.names(z_scores) = name_fix
#read in ranked file, extract names
ranking = read.csv('ranked_gene_list.tsv', sep = "\t")
ranking = ranking$NAME
rz = z_scores[,colnames(z_scores) %in% ranking] #get genes from count included in ranking
rk = ranking[ranking %in% colnames(z_scores)] # get ranked genes included in counts
rz_order = rz[,rk] # order columns by ranking
bestDev = 500
wg <- dnorm(seq(1, ncol(rz_order)), mean = ncol(rz_order)/2, sd = bestDev)
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
wg = range01(wg)
wg = abs(wg-1)
wg
plot(wg,x)
plot(wg)
?par
par(mfrow=c(1,1))
plot(wg)
setwd("~/Documents/GitHub/BioinfGroupProject/rank_cluster_2/k6/analysis")
get_sig = function(set, cluster, pval=0.05, qval=0.25){ # get significant GSEA values from a specific cluster and gene set
file = paste(set, "/gsea_report_for_C",cluster,".tsv", sep = "")
res = read.csv(file, sep = "\t")
return(res[(res[,"NOM.p.val"] <= pval) & (res[,"FDR.q.val"] <= qval),])
}
get_sig('Hallmark', 2)
setwd("~/Documents/GitHub/BioinfGroupProject/rank_cluster_2/k6/analysis")
get_sig = function(set, cluster, pval=0.05, qval=0.25){ # get significant GSEA values from a specific cluster and gene set
file = paste(set, "/gsea_report_for_C",cluster,".tsv", sep = "")
res = read.csv(file, sep = "\t")
return(res[(res[,"NOM.p.val"] <= pval) & (res[,"FDR.q.val"] <= qval),])
}
get_sig('Hallmark', 2)
find_overlap = function(c1, c2){ #find overlap between enrichment sets in two clusters
ol = intersect(c1[,"NAME"], c2[,"NAME"])
c1_ol = c1[c1[,"NAME"] %in% ol,]
c2_ol = c2[c2[,"NAME"] %in% ol,]
ol_frame = data.frame(c1_p = c1_ol[,"NOM.p.val"],
c2_p = c2_ol[,"NOM.p.val"],
c1_q = c2_ol[,"FDR.q.val"],
c2_q = c2_ol[,"FDR.q.val"])
row.names(ol_frame) = ol
return(ol_frame)
}
find_overlap_multi = function(clsts, set, pval= 0.05, qval= 0.25){ # Finds intersection of multiple clusters
res = list()
for(i in 1:length(clsts)){ # may cause error
#print(clsts[i])
res[i] = ifelse(length(get_sig(set, clsts[i], pval, qval)[,"NAME"]) > 0, get_sig(set, clsts[i], pval, qval), NA) #dim(find_unique(i,clsts[-i], set))[1]==0
}
return(Reduce(intersect, res))
sec = c()
for (i in 1:length(clsts)){
if (i +1 <= length(clsts)){
sec = c(sec,intersect(res[[i]], res[[i+1]]))
}
}
return(sec)
}
find_overlap_multi(clsts,"Hallmark")
clsts = c(1:6)
find_overlap_multi(clsts,"Hallmark")
find_separate = function(c1, c2){ #find unique enrichment sets in two clusters
ol = intersect(c1[,"NAME"], c2[,"NAME"])
c1_sep = c1[!(c1[,"NAME"] %in% ol),]
c2_sep = c2[!(c2[,"NAME"] %in% ol),]
return(list(c1_sep, c2_sep))
}
find_unique = function(c, remain, set){ #find all unique gene sets in cluster
r_tot = c() #all gene sets in remaining clusters
for (r in remain){
rem = get_sig(set,r)[,"NAME"]
r_tot = c(r_tot, rem)
}
r_tot = unique(r_tot)
c_sig = get_sig(set,c) # all gene sets in given cluster
#print(c_sig[,"NAME"])
c_uni = c_sig[!(c_sig[,"NAME"] %in% r_tot),] #return gene sets present only in cluster
return(c_uni)
}
find_all_unique = function(set, clsts){ #finds all unique gene sets for each cluster
ret = list()
for (i in clsts){
ret[i] = ifelse(dim(find_unique(i,clsts[-i], set))[1]==0, NA, find_unique(i, clsts[-i], set))
}
return(ret)
}
read_ol = function(all_over, clst_a, clst_b){
select = all_over[all_over[,1] == clst_a & all_over[,2] == clst_b,]
return(strsplit(select[,3], split = ", "))
}
all_overlap = function(set, clsts, pval=0.05, qval=0.25){ #Returns df containing all clusters with overlaps between each other
ol = data.frame() #initialize df
for(i in clsts){ #get all pairs of GSEA results
sig_i = get_sig(set, i, pval, qval)
for(j in clsts){
if(i != j){ #ensure don't find match between same GSEA result
sig_j = get_sig(set,j, pval, qval)
fo = find_overlap(sig_i, sig_j) #find the overlap
if (dim(fo)[1]!=0){ # if there is a detectable overlap
set_nms = paste(rownames(fo), collapse='","') #convert all sets to a single string
ol = rbind(ol,c(i,j,nrow(fo),set_nms)) #create a df with cluster names, size of overlap and items included in overlap
}
}
}
}
if (ncol(ol) >= 2){ # if an overlap was found
ol = ol[!duplicated(apply(ol[,1:2],1,function(x) paste(sort(x),collapse=''))),] #removes duplicate reversed entries
rwnm = paste(ol[,1],"&", ol[,2]) # create rowname out of first and second entries
ol = ol[,3:ncol(ol)]
row.names(ol) = rwnm
colnames(ol) = c("Overlap Size", "Overlap Sets")
}
return(ol)
}
ao_hall =all_overlap('Hallmark', c(1,3))
all_overlap('Hallmark', clsts)
all_overlap('COVID_PPI', clsts)
read_ol(all_overlap('COVID_PPI', clsts), 2,4)
all_overlap('COVID_PPI', clsts)
all_overlap('COVID_PPI', clsts)[,"Overlap Sets"]
ao = all_overlap('COVID_PPI', clsts)[,"Overlap Sets"]
ao
setwd("~/Documents/GitHub/BioinfGroupProject/rank_cluster_2/k5/analysis/interaction")
setwd("~/Documents/GitHub/BioinfGroupProject/rank_cluster_2/k6/analysis")
get_sig = function(set, cluster, pval=0.05, qval=0.25){ # get significant GSEA values from a specific cluster and gene set
file = paste(set, "/gsea_report_for_C",cluster,".tsv", sep = "")
res = read.csv(file, sep = "\t")
return(res[(res[,"NOM.p.val"] <= pval) & (res[,"FDR.q.val"] <= qval),])
}
get_sig('Hallmark', 2)
find_overlap = function(c1, c2){ #find overlap between enrichment sets in two clusters
ol = intersect(c1[,"NAME"], c2[,"NAME"])
c1_ol = c1[c1[,"NAME"] %in% ol,]
c2_ol = c2[c2[,"NAME"] %in% ol,]
ol_frame = data.frame(c1_p = c1_ol[,"NOM.p.val"],
c2_p = c2_ol[,"NOM.p.val"],
c1_q = c2_ol[,"FDR.q.val"],
c2_q = c2_ol[,"FDR.q.val"])
row.names(ol_frame) = ol
return(ol_frame)
}
find_overlap_multi = function(clsts, set, pval= 0.05, qval= 0.25){ # Finds intersection of multiple clusters
res = list()
for(i in 1:length(clsts)){ # may cause error
#print(clsts[i])
res[i] = ifelse(length(get_sig(set, clsts[i], pval, qval)[,"NAME"]) > 0, get_sig(set, clsts[i], pval, qval), NA) #dim(find_unique(i,clsts[-i], set))[1]==0
}
return(Reduce(intersect, res))
sec = c()
for (i in 1:length(clsts)){
if (i +1 <= length(clsts)){
sec = c(sec,intersect(res[[i]], res[[i+1]]))
}
}
return(sec)
}
find_overlap_multi(clsts,"Hallmark")
find_overlap_multi(clsts, 'COVID')
find_overlap_multi(clsts, 'GO_BP')
find_overlap_multi(clsts, 'GOe_BP')
find_overlap_multi(clsts, 'Curated')
find_separate = function(c1, c2){ #find unique enrichment sets in two clusters
ol = intersect(c1[,"NAME"], c2[,"NAME"])
c1_sep = c1[!(c1[,"NAME"] %in% ol),]
c2_sep = c2[!(c2[,"NAME"] %in% ol),]
return(list(c1_sep, c2_sep))
}
find_unique = function(c, remain, set){ #find all unique gene sets in cluster
r_tot = c() #all gene sets in remaining clusters
for (r in remain){
rem = get_sig(set,r)[,"NAME"]
r_tot = c(r_tot, rem)
}
r_tot = unique(r_tot)
c_sig = get_sig(set,c) # all gene sets in given cluster
#print(c_sig[,"NAME"])
c_uni = c_sig[!(c_sig[,"NAME"] %in% r_tot),] #return gene sets present only in cluster
return(c_uni)
}
find_all_unique = function(set, clsts){ #finds all unique gene sets for each cluster
ret = list()
for (i in clsts){
ret[i] = ifelse(dim(find_unique(i,clsts[-i], set))[1]==0, NA, find_unique(i, clsts[-i], set))
}
return(ret)
}
read_ol = function(all_over, clst_a, clst_b){
select = all_over[all_over[,1] == clst_a & all_over[,2] == clst_b,]
return(strsplit(select[,3], split = ", "))
}
all_overlap = function(set, clsts, pval=0.05, qval=0.25){ #Returns df containing all clusters with overlaps between each other
ol = data.frame() #initialize df
for(i in clsts){ #get all pairs of GSEA results
sig_i = get_sig(set, i, pval, qval)
for(j in clsts){
if(i != j){ #ensure don't find match between same GSEA result
sig_j = get_sig(set,j, pval, qval)
fo = find_overlap(sig_i, sig_j) #find the overlap
if (dim(fo)[1]!=0){ # if there is a detectable overlap
set_nms = paste(rownames(fo), collapse='","') #convert all sets to a single string
ol = rbind(ol,c(i,j,nrow(fo),set_nms)) #create a df with cluster names, size of overlap and items included in overlap
}
}
}
}
if (ncol(ol) >= 2){ # if an overlap was found
ol = ol[!duplicated(apply(ol[,1:2],1,function(x) paste(sort(x),collapse=''))),] #removes duplicate reversed entries
rwnm = paste(ol[,1],"&", ol[,2]) # create rowname out of first and second entries
ol = ol[,3:ncol(ol)]
row.names(ol) = rwnm
colnames(ol) = c("Overlap Size", "Overlap Sets")
}
return(ol)
}
ao_hall =all_overlap('Hallmark', c(1,3))
ao_hall =all_overlap('Hallmark', clsts)
ao_cov = all_overlap('GO_BP', clsts)
ao_bp = all_overlap('GO_BP', clsts)
ao_cov = all_overlap('COVID', clsts)
ao_cur = all_overlap('Curated', clsts)
for (set in sets){ #Iterate through each set, find all unique values for each cluster, write to a file in "Unique" folder
fnm = paste("Unique/Unique_",set,".txt", sep = "")
sink(fnm)
uni = find_all_unique(set, clsts)
print(uni)
sink()
# Create a summary file in same directory that lists the number of unique gene sets
len_u = c()
for(u in uni){len_u = c(len_u, length(u))}
write.table(data.frame("Cluster" =  clsts, "Length" = len_u), paste("Unique/UniqueSummary_", set, ".tsv", sep = ""), sep = "\t", row.names = F)
}
for (set in sets){ #Iterate through each set, find all overlap for each cluster, write to a file
ao = all_overlap(set, clsts)
fnm = paste("Overlap/",set, "_overlap.csv", sep ="")
write.csv(ao,fnm)
}
sets = c("Hallmark", "Curated", "COVID", "COVID_PPI", "GO_BP")
for (set in sets){ #Iterate through each set, find all unique values for each cluster, write to a file in "Unique" folder
fnm = paste("Unique/Unique_",set,".txt", sep = "")
sink(fnm)
uni = find_all_unique(set, clsts)
print(uni)
sink()
# Create a summary file in same directory that lists the number of unique gene sets
len_u = c()
for(u in uni){len_u = c(len_u, length(u))}
write.table(data.frame("Cluster" =  clsts, "Length" = len_u), paste("Unique/UniqueSummary_", set, ".tsv", sep = ""), sep = "\t", row.names = F)
}
for (set in sets){ #Iterate through each set, find all overlap for each cluster, write to a file
ao = all_overlap(set, clsts)
fnm = paste("Overlap/",set, "_overlap.csv", sep ="")
write.csv(ao,fnm)
}
setwd("~/Documents/GitHub/BioinfGroupProject/rank_cluster_2/k6/analysis")
for (set in sets){ #Iterate through each set, find all unique values for each cluster, write to a file in "Unique" folder
fnm = paste("Unique/Unique_",set,".txt", sep = "")
sink(fnm)
uni = find_all_unique(set, clsts)
print(uni)
sink()
# Create a summary file in same directory that lists the number of unique gene sets
len_u = c()
for(u in uni){len_u = c(len_u, length(u))}
write.table(data.frame("Cluster" =  clsts, "Length" = len_u), paste("Unique/UniqueSummary_", set, ".tsv", sep = ""), sep = "\t", row.names = F)
}
for (set in sets){ #Iterate through each set, find all overlap for each cluster, write to a file
ao = all_overlap(set, clsts)
fnm = paste("Overlap/",set, "_overlap.csv", sep ="")
write.csv(ao,fnm)
}
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS NSP3-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020",
"C2_Hall", "HALLMARK_PI3K_AKT_MTOR_SIGNALING")
get_ol = function(c_clus, compare, s_clus, sets){
cmp = read.csv(paste(c_clus,'/', compare, ".tsv", sep = ""), sep = "\t")
#cmp_enriched = cmp$CORE_ENRICHED == YES
lst = list()
for(set in sets){
current = read.csv(paste(s_clus,'/', set,".tsv", sep = ""), sep="\t")
lst[set] = ifelse(length(current$SYMBOL[current$SYMBOL %in% cmp$SYMBOL]) > 0 , list(current$SYMBOL[current$SYMBOL %in% cmp$SYMBOL]), NA)
}
return(lst)
}
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS NSP3-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020",
"C2_Hall", "HALLMARK_PI3K_AKT_MTOR_SIGNALING")
get_ol = function(c_clus, compare, s_clus, sets){
cmp = read.csv(paste(c_clus,'/', compare, ".tsv", sep = ""), sep = "\t")
print("cmp found")
#cmp_enriched = cmp$CORE_ENRICHED == YES
lst = list()
for(set in sets){
current = read.csv(paste(s_clus,'/', set,".tsv", sep = ""), sep="\t")
lst[set] = ifelse(length(current$SYMBOL[current$SYMBOL %in% cmp$SYMBOL]) > 0 , list(current$SYMBOL[current$SYMBOL %in% cmp$SYMBOL]), NA)
}
return(lst)
}
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS NSP3-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020",
"C2_Hall", "HALLMARK_PI3K_AKT_MTOR_SIGNALING")
get_ol = function(c_clus, compare, s_clus, sets){
get_ol = function(c_clus, compare, s_clus, sets){
print(paste(c_clus,'/', compare, ".tsv", sep = ""))
cmp = read.csv(paste(c_clus,'/', compare, ".tsv", sep = ""), sep = "\t")
print("cmp found")
#cmp_enriched = cmp$CORE_ENRICHED == YES
lst = list()
for(set in sets){
current = read.csv(paste(s_clus,'/', set,".tsv", sep = ""), sep="\t")
lst[set] = ifelse(length(current$SYMBOL[current$SYMBOL %in% cmp$SYMBOL]) > 0 , list(current$SYMBOL[current$SYMBOL %in% cmp$SYMBOL]), NA)
}
return(lst)
}
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS NSP3-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020",
"C2_Hall", "HALLMARK_PI3K_AKT_MTOR_SIGNALING")
get_ol = function(c_clus, compare, s_clus, sets){
print(paste(c_clus,'/', compare, ".tsv", sep = ""))
cmp = read.csv(paste(c_clus,'/', compare, ".tsv", sep = ""), sep = "\t")
print("cmp found")
#cmp_enriched = cmp$CORE_ENRICHED == YES
lst = list()
for(set in sets){
current = read.csv(paste(s_clus,'/', set,".tsv", sep = ""), sep="\t")
lst[set] = ifelse(length(current$SYMBOL[current$SYMBOL %in% cmp$SYMBOL]) > 0 , list(current$SYMBOL[current$SYMBOL %in% cmp$SYMBOL]), NA)
}
return(lst)
}
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS NSP3-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020",
"C2_Hall", "HALLMARK_PI3K_AKT_MTOR_SIGNALING")
read.csv(C2_COVID_PPI/SARS CORONAVIRUS NSP3-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020.tsv)
read.csv("C2_COVID_PPI/SARS CORONAVIRUS NSP3-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020.tsv", sep = "\t")
pwd
ls
setwd("~/Documents/GitHub/BioinfGroupProject/rank_cluster_2/k6/analysis/interaction")
get_ol = function(c_clus, compare, s_clus, sets){
print(paste(c_clus,'/', compare, ".tsv", sep = ""))
cmp = read.csv(paste(c_clus,'/', compare, ".tsv", sep = ""), sep = "\t")
print("cmp found")
#cmp_enriched = cmp$CORE_ENRICHED == YES
lst = list()
for(set in sets){
current = read.csv(paste(s_clus,'/', set,".tsv", sep = ""), sep="\t")
lst[set] = ifelse(length(current$SYMBOL[current$SYMBOL %in% cmp$SYMBOL]) > 0 , list(current$SYMBOL[current$SYMBOL %in% cmp$SYMBOL]), NA)
}
return(lst)
}
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS NSP3-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020",
"C2_Hall", "HALLMARK_PI3K_AKT_MTOR_SIGNALING")
get_ol = function(c_clus, compare, s_clus, sets){
print(paste(c_clus,'/', compare, ".tsv", sep = ""))
cmp = read.csv(paste(c_clus,'/', compare, ".tsv", sep = ""), sep = "\t")
#cmp_enriched = cmp$CORE_ENRICHED == YES
lst = list()
for(set in sets){
current = read.csv(paste(s_clus,'/', set,".tsv", sep = ""), sep="\t")
lst[set] = ifelse(length(current$SYMBOL[current$SYMBOL %in% cmp$SYMBOL]) > 0 , list(current$SYMBOL[current$SYMBOL %in% cmp$SYMBOL]), NA)
}
return(lst)
}
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS NSP3-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020",
"C2_Hall", "HALLMARK_PI3K_AKT_MTOR_SIGNALING")
test = read.csv("C2_COVID_PPI/SARS CORONAVIRUS NSP3-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020.tsv", sep = "\t")
View(test)
test[test[,"CORE.ENRICHMENT"] == "Yes",]
get_ol = function(c_clus, compare, s_clus, sets, core = T){
cmp = read.csv(paste(c_clus,'/', compare, ".tsv", sep = ""), sep = "\t")
if(core == T){cmp = cmp[cmp[,"CORE.ENRICHMENT"]=="Yes",]}
lst = list()
for(set in sets){
current = read.csv(paste(s_clus,'/', set,".tsv", sep = ""), sep="\t")
if(core == T){current = current[current[,"CORE.ENRICHMENT"]=="Yes",]}
lst[set] = ifelse(length(current$SYMBOL[current$SYMBOL %in% cmp$SYMBOL]) > 0 , list(current$SYMBOL[current$SYMBOL %in% cmp$SYMBOL]), NA)
}
return(lst)
}
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS NSP3-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020",
"C2_Hall", "HALLMARK_PI3K_AKT_MTOR_SIGNALING")
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS NSP3-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020",
"C2_Hall", "HALLMARK_PI3K_AKT_MTOR_SIGNALING", core=F)
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS NSP3-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020",
"C2_Hall", "HALLMARK_PI3K_AKT_MTOR_SIGNALING")
get_ol('C2_COVID_PPI', "SARS-COV-2/HUMAN INTERACTOME GENE SET FROM GUZZI", "C2_Hall", "HALLMARK_PI3K_AKT_MTOR_SIGNALING")
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS ORF1AB FROM VIRUS-HOST PPI P-HIPSTER 2020", "C2_Hall", "HALLMARK_PI3K_AKT_MTOR_SIGNALING")
get_ol('C4_COVID_PPI', "SARS CORONAVIRUS NSP3-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020",
"C4_Hall", "HALLMARK_PI3K_AKT_MTOR_SIGNALING")
get_ol('C4_COVID_PPI', "SARS CORONAVIRUS ORF1AB FROM VIRUS-HOST PPI P-HIPSTER 2020",
"C4_Hall", "HALLMARK_PI3K_AKT_MTOR_SIGNALING")
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS NUCLEOCAPSID PROTEIN FROM VIRUS-HOST PPI P-HIPSTER 2020",
'C2_Hall', 'hall2')
#c2 unique
hall2 = c("HALLMARK_DNA_REPAIR","HALLMARK_MITOTIC_SPINDLE")
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS NUCLEOCAPSID PROTEIN FROM VIRUS-HOST PPI P-HIPSTER 2020",
'C2_Hall', 'hall2')
#c2 unique
hall2 = c("HALLMARK_DNA_REPAIR","HALLMARK_MITOTIC_SPINDLE")
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS NUCLEOCAPSID PROTEIN FROM VIRUS-HOST PPI P-HIPSTER 2020",
'C2_Hall', 'hall2')
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS NUCLEOCAPSID PROTEIN FROM VIRUS-HOST PPI P-HIPSTER 2020",
'C2_Hall', 'HALLMARK_DNA_REPAIR')
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS NUCLEOCAPSID PROTEIN FROM VIRUS-HOST PPI P-HIPSTER 2020",
'C2_Hall', hall2)
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS NSP4-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020",
'C2_Hall', hall2)
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS NSP7-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020",
'C2_Hall', hall2)
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS HYPOTHETICAL PROTEIN SARS7A FROM VIRUS-HOST PPI P-HIPSTER 2020",
'C2_Hall', hall2)
#c4 unique
hall4 = c("HALLMARK_APICAL_JUNCTION","HALLMARK_IL2_STAT5_SIGNALING","HALLMARK_COMPLEMENT","HALLMARK_TGF_BETA_SIGNALING",
"HALLMARK_P53_PATHWAY","HALLMARK_ADIPOGENESIS","HALLMARK_HEME_METABOLISM","HALLMARK_MYOGENESIS",
"HALLMARK_INFLAMMATORY_RESPONSE","HALLMARK_HYPOXIA","HALLMARK_ALLOGRAFT_REJECTION","HALLMARK_REACTIVE_OXYGEN_SPECIES_PATHWAY",
"HALLMARK_ESTROGEN_RESPONSE_EARLY","HALLMARK_APOPTOSIS","HALLMARK_INTERFERON_GAMMA_RESPONSE","HALLMARK_NOTCH_SIGNALING",
"HALLMARK_KRAS_SIGNALING_UP","HALLMARK_IL6_JAK_STAT3_SIGNALING","HALLMARK_COAGULATION","HALLMARK_TNFA_SIGNALING_VIA_NFKB",
"HALLMARK_BILE_ACID_METABOLISM","HALLMARK_UV_RESPONSE_DN","HALLMARK_INTERFERON_ALPHA_RESPONSE",
"HALLMARK_WNT_BETA_CATENIN_SIGNALING","HALLMARK_ANDROGEN_RESPONSE","HALLMARK_ESTROGEN_RESPONSE_LATE")
get_ol('C4_COVID_PPI', "SARS CORONAVIRUS E2 GLYCOPROTEIN PRECURSOR FROM VIRUS-HOST PPI P-HIPSTER 2020",
'C4_Hall', hall4)
get_ol('C4_COVID_PPI', "SARS CORONAVIRUS NSP8-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020",
'C4_Hall', hall4)
get_ol('C6_COVID_PPI', "COVID19-NSP8 PROTEIN HOST PPI FROM KROGAN",
'C6_Hall', hall6)
#c6 unique
hall6 = c("HALLMARK_MYC_TARGETS_V1","HALLMARK_MYC_TARGETS_V2","HALLMARK_G2M_CHECKPOINT","HALLMARK_E2F_TARGETS")
get_ol('C6_COVID_PPI', "COVID19-NSP8 PROTEIN HOST PPI FROM KROGAN",
'C6_Hall', hall6)
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS NUCLEOCAPSID PROTEIN FROM VIRUS-HOST PPI P-HIPSTER 2020",
'C2_Hall', hall2)
#Overlap C2 & C4
get_ol('C2_COVID_PPI', "SARS CORONAVIRUS NSP3-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020",
"C2_Hall", "HALLMARK_PI3K_AKT_MTOR_SIGNALING")
get_ol('C4_COVID_PPI', "SARS CORONAVIRUS NSP3-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020",
"C4_Hall", "HALLMARK_PI3K_AKT_MTOR_SIGNALING")
