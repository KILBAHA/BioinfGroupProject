print("hello world")
print("hello world")
print("hello world")
x = c(1,2,3)
y = c(1,2,3)
plot(x,y)
iris
plot(iris$Sepal.Length,iris$Sepal.Width)
install.packages("installr")
library(installr)
BiocManager
plot(1,1)
install.packages("BiocManager")
BiocManager::install('DESeq2')
library( "DESeq2" )
warnings()
R.version
R.version
?BiocManager
BiocManager
library('BiocManager')
BiocManager::install("DESeq2")
.libPaths()
install.packages('DESeq2')
library('foreach')
library('parallel')
library('flexclust') # handles weighted clustering
setwd("~/Documents/GitHub/BioinfGroupProject/GSEA_rank_cluster")
#File used to understand foreach command for parallel processing of clusters
library('foreach')
library('parallel')
library('flexclust') # handles weighted clustering
setwd("~/Documents/GitHub/BioinfGroupProject/GSEA_rank_cluster")
#set.seed(255)
#read in and format counts (z_scores)
z_scores = read.csv("data_expression_median.txt", sep = "\t", stringsAsFactors = FALSE, header = TRUE)
map = z_scores[,c(1,2)]
inst_names = colnames(z_scores)[3:length(colnames(z_scores))]
z_scores = z_scores[,-2]
z_scores = as.data.frame(t(z_scores), stringsAsFactors = FALSE)
names(z_scores) = map[,1]
z_scores = z_scores[-1,]
z_scores = as.data.frame(apply(z_scores, 2, as.numeric))
name_fix = c()
for(name in inst_names){name_fix = c(name_fix,substr(name,11,nchar(name)-3))}
row.names(z_scores) = name_fix
#read in ranked file, extract names
ranking = read.csv('ranked_gene_list.tsv', sep = "\t")
ranking = ranking$NAME
rz = z_scores[,colnames(z_scores) %in% ranking] #get genes from count included in ranking
rk = ranking[ranking %in% colnames(z_scores)] # get ranked genes included in counts
rz_order = rz[,rk] # order columns by ranking
cl = makeCluster(detectCores() -1)
cl
get_WCSS = function(clustering, data){
cents = as.data.frame(parameters(clustering))
wcss = c()
wcss_clst = c()
for (k in 1:nrow(cents)){ # for each cluster
clust_cent = cents[k,]
clust_dat = data[names(which(clusters(clustering) == k)),]    # need to make sure only select data from relevant cluster
for (atrib in names(clust_cent)){ # for each attribute
wcss_peratrib = sum(abs(as.numeric(clust_cent[atrib])-clust_dat[atrib])^2)
wcss_clst = c(wcss_clst,wcss_peratrib)
}
wcss = c(wcss,sum(wcss_clst))
wcss_clst = c()
}
return(sum(wcss))
} #returns WCSS for given cluster
convergence = function(num_seeds, k_clust, data, weights = wg){ #function to determine seed that optimises given k
seeds = sample(1:1000, num_seeds, replace = FALSE) # Select random seeds to itterate through
clust_frame = data.frame(seed = c(), wcss = c())
for(seed in seeds){
set.seed(seed)
cls = cclust(data, method = "hardcl", k=k_clust, weights = weights)
cls_WCSS = get_WCSS(cls,data)
clust_frame = rbind(clust_frame, data.frame(seed = seed, wcss = cls_WCSS))
}
return(clust_frame)
}
#optimise sd - which sd value gives the lowest WCC?
sdev = seq(100,1000, by=100)
bestWCC = Inf
bestDev = 0 #1400
foreach(s = sdev) %dopar% {
wg <- dnorm(seq(1, ncol(rz_order)), mean = ncol(rz_order)/2, sd = sdev)
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
wg = range01(wg)
cv = convergence(1,2,rz_order, weights=wg)
WCC = min(cv$wcss)
WCC
}
sdev[which.min(WCC)]
WCCs = foreach(s = sdev) %dopar% {
wg <- dnorm(seq(1, ncol(rz_order)), mean = ncol(rz_order)/2, sd = sdev)
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
wg = range01(wg)
cv = convergence(1,2,rz_order, weights=wg)
WCC = min(cv$wcss)
WCC
}
sdev[which.min(WCCs)]
sdev[which.min(WCCs)]
wg <- dnorm(seq(1, ncol(rz_order)), mean = ncol(rz_order)/2, sd = bestDev)
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
wg = range01(wg)
elb = foreach(k = 1:10){
cv = convergence(2,k,rz_order,weights=wg)
WCC = min(cv$wcss)
WCC
}
elb = foreach(k = 1:10) %dopar%{
cv = convergence(2,k,rz_order,weights=wg)
WCC = min(cv$wcss)
WCC
}
elb = foreach(k = 2:10) %dopar%{
cv = convergence(2,k,rz_order,weights=wg)
WCC = min(cv$wcss)
WCC
}
elb = foreach(k = 2:10) %dopar% {
cv = convergence(2,k,rz_order,weights=wg)
#WCC = min(cv$wcss)
#WCC
}
for(k in 2:10){
cv = convergence(2,k,rz_order,weights=wg)
}
wg
bestDev = sdev[which.min(WCCs)]
wg <- dnorm(seq(1, ncol(rz_order)), mean = ncol(rz_order)/2, sd = bestDev)
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
wg = range01(wg)
wg
elb = foreach(k = 2:10) %dopar% {
cv = convergence(2,k,rz_order,weights=wg)
#WCC = min(cv$wcss)
#WCC
}
elb = foreach(k = 2:10) %dopar% {
cv = convergence(2,k,rz_order,weights=wg)
WCC = min(cv$wcss)
WCC
}
plot(k, elb, type='l', main = "Elbow Plot", ylab = "WCSS", xlab = "K" )
elb = unlist(elb)
elb_frame = data.frame( k_val = 2:10, WCSS = elb)
write.table(elb_frame, "elbow_para.txt", sep = "\t")
plot(k, elb, type='l', main = "Elbow Plot", ylab = "WCSS", xlab = "K" )
k
plot(2:10, elb, type='l', main = "Elbow Plot", ylab = "WCSS", xlab = "K" )
cv
elb = foreach(k = 2:3) %dopar% { #k = 2:10
cv = convergence(2,k,rz_order,weights=wg)
#WCC = min(cv$wcss)
cv
#WCC
}
elb
for (run in elb){
elb
}
for (run in elb){
print(elb)
}
for (run in elb){
print(run)
}
for (run in elb){
run[,"wcss"]
}
for (run in elb){
run[which.min(run$wcss),]
}
for (run in elb){
print(run[which.min(run$wcss),])
}
seeds = c()
wcss = c()
for (run in elb){
lowest = run[which.min(run$wcss),]
seeds = c(seeds, lowest$seed)
wcss = c(wcss, lowest$wcss)
}
elb_frame = data.frame(k_val = 2:3, WCSS = wcss, SEED = seeds)
View(elb_frame)
elb = foreach(k = 2:10) %dopar% { #k = 2:10
cv = convergence(2,k,rz_order,weights=wg)
#WCC = min(cv$wcss)
cv
#WCC
}
seeds = c()
wcss = c()
for (run in elb){
lowest = run[which.min(run$wcss),]
seeds = c(seeds, lowest$seed)
wcss = c(wcss, lowest$wcss)
}
plot(2:10, wcss, type='l', main = "Elbow Plot", ylab = "WCSS", xlab = "K" )
elb_frame = data.frame(k_val = 2:10, WCSS = wcss, SEED = seeds)
write.table(elb_frame, "elbow_para.txt", sep = "\t")
wcss = c()
lowest = run[which.min(run$wcss),]
seeds = c(seeds, lowest$seed)
wcss = c(wcss, lowest$wcss)
seeds = c()
wcss = c()
for (run in elb){
lowest = run[which.min(run$wcss),]
seeds = c(seeds, lowest$seed)
wcss = c(wcss, lowest$wcss)
}
plot(2:10, wcss, type='l', main = "Elbow Plot", ylab = "WCSS", xlab = "K" )
elb_frame = data.frame(k_val = 2:10, WCSS = wcss, SEED = seeds)
write.table(elb_frame, "elbow_para.txt", sep = "\t")
for (run in elb){
lowest = run[which.min(run$wcss),]
seeds = c(seeds, lowest$seed)
wcss = c(wcss, lowest$wcss)
}
for (run in elb){
lowest = run[which.min(run$wcss),]
seeds = c(seeds, lowest$seed)
wcss = c(wcss, lowest$wcss)
}
elb = foreach(k = 2:10) %dopar% { #k = 2:10
cv = convergence(2,k,rz_order,weights=wg)
#WCC = min(cv$wcss)
cv
#WCC
}
seeds = c()
wcss = c()
for (run in elb){
lowest = run[which.min(run$wcss),]
seeds = c(seeds, lowest$seed)
wcss = c(wcss, lowest$wcss)
}
plot(2:10, wcss, type='l', main = "Elbow Plot", ylab = "WCSS", xlab = "K" )
elb_frame = data.frame(k_val = 2:10, WCSS = wcss, SEED = seeds)
write.table(elb_frame, "elbow_para.txt", sep = "\t")
elb = foreach(k = 2:10) %dopar% { #k = 2:10
cv = convergence(2,k,rz_order,weights=wg)
#WCC = min(cv$wcss)
cv
#WCC
}
seeds = c()
wcss = c()
for (run in elb){
lowest = run[which.min(run$wcss),]
seeds = c(seeds, lowest$seed)
wcss = c(wcss, lowest$wcss)
}
plot(2:10, wcss, type='l', main = "Elbow Plot", ylab = "WCSS", xlab = "K" )
elb_frame = data.frame(k_val = 2:10, WCSS = wcss, SEED = seeds)
write.table(elb_frame, "elbow_para.txt", sep = "\t")
