}
res <<- res
}
find_overlap_multi(c(2,8,9), "COVID_PPI")
find_overlap_multi = function(clsts, set){
res = list()
for(cl in clsts){
res = res.append(res,get_sig(set, cl))
}
res <<- res
}
find_overlap_multi(c(2,8,9), "COVID_PPI")
find_overlap_multi = function(clsts, set){
res = list()
for(i in 1:length(clsts)){
res[i] = get_sig(set, cl)
}
res <<- res
}
find_overlap_multi(c(2,8,9), "COVID_PPI")
find_overlap_multi = function(clsts, set){
res = list()
for(i in 1:length(clsts)){
res[i] = get_sig(set, clsts[i])
}
res <<- res
}
find_overlap_multi(c(2,8,9), "COVID_PPI")
find_overlap_multi = function(clsts, set){
res = list()
for(i in 1:length(clsts)){
print(clsts[i])
res[i] = get_sig(set, clsts[i])
}
res <<- res
}
find_overlap_multi(c(2,8,9), "COVID_PPI")
View(res)
res[[1]]
res
unique(res)
get_sig("COVID", 2)[,"NAME"]
find_overlap_multi = function(clsts, set){
res = c()
for(i in 1:length(clsts)){
print(clsts[i])
res = c(res,get_sig(set, clsts[i])[,"NAME"])
}
res <<- res
}
find_overlap_multi(c(2,8,9), "COVID_PPI")
res
get_sig("COVID", 9)[,"NAME"]
get_sig("COVID", 8)[,"NAME"]
get_sig("COVID", 2)[,"NAME"]
get_sig("COVID_PPI", 2)[,"NAME"]
get_sig("COVID_PPI", 8)[,"NAME"]
get_sig("COVID_PPI", 9)[,"NAME"]
res
unique(res)
!unique(res)
res[!unique(res)]
res[unique(res)]
unique(res)
?unique
duplicated(res)
res[duplicated(res)]
?intersect
find_overlap_multi = function(clsts, set){
res = list()
for(i in 1:length(clsts)){
print(clsts[i])
res[i] = get_sig(set, clsts[i])
}
res <<- res
}
find_overlap_multi(c(2,8,9), "COVID_PPI")
find_overlap_multi = function(clsts, set){
res = list()
for(i in 1:length(clsts)){
print(clsts[i])
res[i] = get_sig(set, clsts[i])[,"NAME"]
}
res <<- res
}
find_overlap_multi(c(2,8,9), "COVID_PPI")
View(res)
res[1]
res[2]
res[3]
find_overlap_multi = function(clsts, set){
res = list()
for(i in 1:length(clsts)){
print(clsts[i])
res[i] = get_sig(set, clsts[i])
}
res <<- res
}
find_overlap_multi(c(2,8,9), "COVID_PPI")
res[1]
res[2]
res[3]
intersect(res)
intersect(res[1],res[2])
res[1][1]
res[1]
res[[1]]
intersect(res[[1]], res[[2]])
intersect(res[[1]], res[[2]], res[[3]])
find_overlap_multi = function(clsts, set){
res = list()
for(i in 1:length(clsts)){
print(clsts[i])
res[i] = get_sig(set, clsts[i])
}
sec = c()
for (i in 1:length(clsts)){
if (i +1 <= length(clsts)){
sec = c(sec,intersect(res[[i]], res[[i+1]]))
}
}
return(sec)
}
find_overlap_multi(c(2,8,9), "COVID_PPI")
find_overlap_multi = function(clsts, set){
res = list()
for(i in 1:length(clsts)){
#print(clsts[i])
res[i] = get_sig(set, clsts[i])
}
sec = c()
for (i in 1:length(clsts)){
if (i +1 <= length(clsts)){
sec = c(sec,intersect(res[[i]], res[[i+1]]))
}
}
return(sec)
}
find_overlap_multi(c(2,8,9), "COVID_PPI")
find_overlap_multi(c(2,8,9), "COVID")
find_overlap_multi(c(2,8,9), "Hallmark")
find_overlap_multi(c(2,3,8,9), "Hallmark")
find_overlap_multi(c(2,4,8,9), "Hallmark")
find_overlap_multi(c(2,5,8,9), "Hallmark")
find_overlap_multi(c(2,6,8,9), "Hallmark")
find_overlap_multi(c(2,7,8,9), "Hallmark")
find_overlap_multi(c(2,8,9), "Hallmark")
find_overlap_multi(c(2,8,9), "Curated")
find_overlap_multi(c(2,8,9), "GO")
find_overlap_multi(c(2,8,9), "GO_BP")
find_overlap_multi(c(2,8,9), "Hallmark")
find_overlap_multi(c(1,4,5), "Hallmark")
find_overlap_multi(c(1,4,5), "Curated")
find_overlap_multi(c(1,4,5), "GO")
find_overlap_multi(c(1,4,5), "GO_BP")
find_overlap_multi(c(1,5), "GO_BP")
find_overlap_multi(c(1,5), "Hallmark")
find_overlap_multi(c(1,5), "Signature")
find_overlap_multi(c(1,5), "Curated")
find_overlap_multi(c(2,8,6,9), "Hallmark")
find_overlap_multi(c(2,8,9), "Hallmark")
find_overlap_multi = function(clsts, set){
res = list()
for(i in 1:length(clsts)){
#print(clsts[i])
res[i] = get_sig(set, clsts[i])[,"NAME"]
}
sec = c()
for (i in 1:length(clsts)){
if (i +1 <= length(clsts)){
sec = c(sec,intersect(res[[i]], res[[i+1]]))
}
}
return(sec)
}
find_overlap_multi(c(2,8,9), "Hallmark")
find_overlap_multi(c(1,5), "Curated")
find_overlap_multi = function(clsts, set){
res = list()
for(i in 1:length(clsts)){
#print(clsts[i])
res[i] = ifelse(length(get_sig(set, clsts[i])[,"NAME"]) > 0, get_sig(set, clsts[i]), NA) #dim(find_unique(i,clsts[-i], set))[1]==0
}
sec = c()
for (i in 1:length(clsts)){
if (i +1 <= length(clsts)){
sec = c(sec,intersect(res[[i]], res[[i+1]]))
}
}
return(sec)
}
find_overlap_multi(c(2,8,9), "Hallmark")
find_overlap_multi(c(1,5), "Curated")
find_overlap_multi(c(2,8,6), "Hallmark")
find_overlap_multi(c(2,8,9), "Hallmark")
find_overlap_multi(c(2,6,8,9), "Hallmark")
find_overlap_multi(c(2,6,1,8,9), "Hallmark")
find_overlap_multi(c(2,1,8,9), "Hallmark")
find_overlap_multi(c(2,6,8,9), "Hallmark")
find_overlap_multi(c(2,8,9), "Hallmark")
find_overlap_multi(c(2,8), "Hallmark")
setwd("~/Documents/GitHub/BioinfGroupProject/GSEA_rank_cluster/k9/analysis/Sets")
files = read.table('files.txt')
View(files)
files = files$V1
read.csv("E2.tsv", sep = "\t")
E2 = read.csv("E2.tsv", sep = "\t")
View(E2)
lst = list()
lst["ggg"]
lst[g] = 1
lst["g"] = 1
lst
lst = list()
for(file in files){
print(file)
current = read.csv(file, sep = "\t")
lst[file] = current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]
}
View(lst)
for(file in files){
print(file)
current = read.csv(file, sep = "\t")
print(current$SYMBOL[current$SYMBOL %in% E2$SYMBOL])
}
lst = list()
for(file in files){
current = read.csv(file, sep = "\t")
lst[file] = current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]
}
for(file in files){
current = read.csv(file, sep = "\t")
lst[file] = ifelse(current$SYMBOL[current$SYMBOL %in% E2$SYMBOL] > 0, current$SYMBOL[current$SYMBOL %in% E2$SYMBOL], NA)
}
lst
for(file in files){
current = read.csv(file, sep = "\t")
lst[file] = ifelse(length(current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]) > 0, current$SYMBOL[current$SYMBOL %in% E2$SYMBOL], NA)
}
lst
View(lst)
for(file in files){
current = read.csv(file, sep = "\t")
lst[file] = ifelse(length(current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]) > 0, c(current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]), NA)
}
lst
E2$SYMBOL %in% E2$SYMBOL
E2$SYMBOL[E2$SYMBOL %in% E2$SYMBOL]
for(file in files){
current = read.csv(file, sep = "\t")
lst[file] = length(current$SYMBOL[current$SYMBOL %in% E2$SYMBOL])#ifelse(length(current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]) > 0, c(current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]), NA)
}
lst
lst = list()
for(file in files){
current = read.csv(file, sep = "\t")
lst[file] = ifelse(length(current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]) = 0,NA, current$SYMBOL[current$SYMBOL %in% E2$SYMBOL])
}
lst = list()
for(file in files){
current = read.csv(file, sep = "\t")
lst[file] = ifelse(length(current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]) == 0,NA, current$SYMBOL[current$SYMBOL %in% E2$SYMBOL])
}
lst
lst = list()
for(file in files){
current = read.csv(file, sep = "\t")
lst[file] = ifelse(length(current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]) == 0,print("x"), current$SYMBOL[current$SYMBOL %in% E2$SYMBOL])
}
lst
lst = list()
for(file in files){
current = read.csv(file, sep = "\t")
lst[file] = ifelse(length(current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]) == 0,rep(NA, length(current$SYMBOL)), current$SYMBOL[current$SYMBOL %in% E2$SYMBOL])
}
lst
View(lst)
lst[["HALLMARK_IL2_STAT5_SIGNALING.tsv"]]
lst = list()
for(file in files){
current = read.csv(file, sep = "\t")
lst[file] = ifelse(length(current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]) == 0,0, current$SYMBOL[current$SYMBOL %in% E2$SYMBOL])
}
lst
lst = list()
for(file in files){
current = read.csv(file, sep = "\t")
lst[file] = ifelse(length(current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]) == 0,0, c(current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]))
}
lst
lst = list()
for(file in files){
current = read.csv(file, sep = "\t")
lst[file] = current$SYMBOL %in% E2$SYMBOL
}
lst = list()
for(file in files){
current = read.csv(file, sep = "\t")
lst[file] = current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]
}
lst
lst = list()
for(file in files){
current = read.csv(file, sep = "\t")
ol = current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]
if (length(ol) >0){
lst[file] = ol
}
}
lst
lst = list()
for(file in files){
current = read.csv(file, sep = "\t")
ol = current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]
if (length(ol) >0){
lst[file] = list(ol)
}
}
lst
lst = list()
for(file in files){
current = read.csv(file, sep = "\t")
ol = current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]
if (length(ol) >0){
lst[file] = c(ol)
}
}
lst = list()
for(file in files){
current = read.csv(file, sep = "\t")
ol = current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]
if (length(ol) >0){
lst[file] = list(ol)
}
}
lst
View(lst)
setwd("~/Documents/GitHub/BioinfGroupProject/GSEA_rank_cluster/k9/analysis")
get_sig = function(set, cluster, pval=0.05, qval=0.25){ # get significant GSEA values from a specific cluster and gene set
file = paste(set, "/gsea_report_for_C",cluster,".tsv", sep = "")
res = read.csv(file, sep = "\t")
return(res[(res[,"NOM.p.val"] <= pval) & (res[,"FDR.q.val"] <= qval),])
}
find_overlap = function(c1, c2){ #find overlap between enrichment sets in two clusters
ol = intersect(c1[,"NAME"], c2[,"NAME"])
c1_ol = c1[c1[,"NAME"] %in% ol,]
c2_ol = c2[c2[,"NAME"] %in% ol,]
ol_frame = data.frame(c1_p = c1_ol[,"NOM.p.val"],
c2_p = c2_ol[,"NOM.p.val"],
c1_q = c2_ol[,"FDR.q.val"],
c2_q = c2_ol[,"FDR.q.val"])
row.names(ol_frame) = ol
return(ol_frame)
}
find_overlap_multi = function(clsts, set){ # Finds intersection of multiple clusters
res = list()
for(i in 1:length(clsts)){
#print(clsts[i])
res[i] = ifelse(length(get_sig(set, clsts[i])[,"NAME"]) > 0, get_sig(set, clsts[i]), NA) #dim(find_unique(i,clsts[-i], set))[1]==0
}
sec = c()
for (i in 1:length(clsts)){
if (i +1 <= length(clsts)){
sec = c(sec,intersect(res[[i]], res[[i+1]]))
}
}
return(sec)
}
find_overlap_multi(c(2,8,9), "Hallmark")
find_overlap_multi(c(1,5), "Curated")
find_separate = function(c1, c2){ #find unique enrichment sets in two clusters
ol = intersect(c1[,"NAME"], c2[,"NAME"])
c1_sep = c1[!(c1[,"NAME"] %in% ol),]
c2_sep = c2[!(c2[,"NAME"] %in% ol),]
return(list(c1_sep, c2_sep))
}
find_unique = function(c, remain, set){ #find all unique gene sets in cluster
r_tot = c() #all gene sets in remaining clusters
for (r in remain){
rem = get_sig(set,r)[,"NAME"]
r_tot = c(r_tot, rem)
}
r_tot = unique(r_tot)
c_sig = get_sig(set,c) # all gene sets in given cluster
#print(c_sig[,"NAME"])
c_uni = c_sig[!(c_sig[,"NAME"] %in% r_tot),] #return gene sets present only in cluster
return(c_uni)
}
find_all_unique = function(set, clsts){ #finds all unique gene sets for each cluster
ret = list()
for (i in clsts){
ret[i] = ifelse(dim(find_unique(i,clsts[-i], set))[1]==0, NA, find_unique(i, clsts[-i], set))
}
return(ret)
}
read_ol = function(all_over, clst_a, clst_b){
select = all_over[all_over[,1] == clst_a & all_over[,2] == clst_b,]
return(strsplit(select[,3], split = ", "))
}
all_overlap = function(set, clsts){ #Returns df containing all clusters with overlaps between each other
ol = data.frame() #initialize df
for(i in clsts){ #get all pairs of GSEA results
sig_i = get_sig(set, i)
for(j in clsts){
if(i != j){ #ensure don't find match between same GSEA result
sig_j = get_sig(set,j)
fo = find_overlap(sig_i, sig_j) #find the overlap
if (dim(fo)[1]!=0){ # if there is a detectable overlap
set_nms = paste(rownames(fo), collapse='","') #convert all sets to a single string
ol = rbind(ol,c(i,j,nrow(fo),set_nms)) #create a df with cluster names, size of overlap and items included in overlap
}
}
}
}
if (ncol(ol) >= 2){ # if an overlap was found
ol = ol[!duplicated(apply(ol[,1:2],1,function(x) paste(sort(x),collapse=''))),] #removes duplicate reversed entries
rwnm = paste(ol[,1],"&", ol[,2]) # create rowname out of first and second entries
ol = ol[,3:ncol(ol)]
row.names(ol) = rwnm
colnames(ol) = c("Overlap Size", "Overlap Sets")
}
return(ol)
}
clsts = c(1:9)
sets = c("Hallmark", "Curated", "COVID", "COVID_PPI", "GO_BP")
for (set in sets){ #Iterate through each set, find all unique values for each cluster, write to a file in "Unique" folder
fnm = paste("Unique/Unique_",set,".txt", sep = "")
sink(fnm)
uni = find_all_unique(set, clsts)
print(uni)
sink()
# Create a summary file in same directory that lists the number of unique gene sets
len_u = c()
for(u in uni){len_u = c(len_u, length(u))}
write.table(data.frame("Cluster" =  clsts, "Length" = len_u), paste("Unique/UniqueSummary_", set, ".tsv", sep = ""), sep = "\t", row.names = F)
}
for (set in sets){ #Iterate through each set, find all overlap for each cluster, write to a file
ao = all_overlap(set, clsts)
fnm = paste("Overlap/",set, "_overlap.csv", sep ="")
write.csv(ao,fnm)
}
lst = list()
for(file in files){
current = read.csv(file, sep = "\t")
lst[file] = ifelse(length(current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]) > 0 , list(current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]), NA)
}
files = read.table('files.txt')
setwd("~/Documents/GitHub/BioinfGroupProject/GSEA_rank_cluster/k9/analysis/Sets")
files = read.table('files.txt')
files = files$V1
E2 = read.csv("E2.tsv", sep = "\t")
lst = list()
for(file in files){
current = read.csv(file, sep = "\t")
lst[file] = ifelse(length(current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]) > 0 , list(current$SYMBOL[current$SYMBOL %in% E2$SYMBOL]), NA)
}
lst
get_ol("E2", "HALLMARK_IL2_STAT5_SIGNALING")
get_ol = function(compare, sets){
cmp = read.csv(paste(compare, ".tsv", sep = ""), sep = "\t")
lst = list()
for(set in sets){
current = read.csv(paste(set,".tsv", sep = ""), sep="\t")
lst[set] = ifelse(length(current$SYMBOL[current$SYMBOL %in% cmp$SYMBOL]) > 0 , list(current$SYMBOL[current$SYMBOL %in% cmp$SYMBOL]), NA)
}
return(lst)
}
get_ol("E2", "HALLMARK_IL2_STAT5_SIGNALING")
get_ol("E2", c("HALLMARK_IL2_STAT5_SIGNALING", "HALLMARK_P53_PATHWAY"))
uni2 = c("HALLMARK_PI3K_AKT_MTOR_SIGNALING", "HALLMARK_ALLOGRAFT_REJECTION", "HALLMARK MITOTIC SPINDLE", "HALLMARK_UV_RESPONSE_UP")
uni3 = c("HALLMARK_MYC_TARGETS_V1", "HALLMARK_MYC_TARGETS_V2", "HALLMARK_E2F_TARGETS", "HALLMARK_G2M_CHECKPOINT")
uni6 = c("HALLMARK_PROTEIN_SECRETION", "HALLMARK_PEROXISOME")#, "HALLMARK_KRAS_SIGNALING_DN") -> need to get a hold of this
get_ol("SARS CORONAVIRUS NUCLEOCAPSID PROTEIN FROM VIRUS-HOST PPI P-HIPSTER 2020", uni2)
#get_ol("SARS CORONAVIRUS NSP4-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020", uni2)
get_ol("SARS-COV-2/HUMAN INTERACTOME GENE SET FROM GUZZI", uni2)
get_ol("COVID19-NSP9 PROTEIN HOST PPI FROM KROGAN", uni2)
get_ol("COVID19-NSP8 PROTEIN HOST PPI FROM KROGAN", uni3)
get_ol("SARS CORONAVIRUS LEADER PROTEIN FROM VIRUS-HOST PPI P-HIPSTER 2020", uni6)
get_ol("SARS CORONAVIRUS FORMERLY KNOWN AS GROWTH-FACTOR-LIKE PROTEIN FROM VIRUS-HOST PPI P-HIPSTER 2020", uni6)
get_ol("SARS CORONAVIRUS FORMERLY KNOWN AS GROWTH-FACTOR-LIKE PROTEIN FROM VIRUS-HOST PPI P-HIPSTER 2020", uni6)
get_ol("SARS CORONAVIRUS LEADER PROTEIN FROM VIRUS-HOST PPI P-HIPSTER 2020", uni6)
get_ol("COVID19-NSP8 PROTEIN HOST PPI FROM KROGAN", uni3)
get_ol("SARS CORONAVIRUS NUCLEOCAPSID PROTEIN FROM VIRUS-HOST PPI P-HIPSTER 2020", uni2)
uni2 = c("HALLMARK_PI3K_AKT_MTOR_SIGNALING", "HALLMARK_ALLOGRAFT_REJECTION", "HALLMARK_MITOTIC_SPINDLE", "HALLMARK_UV_RESPONSE_UP")
uni3 = c("HALLMARK_MYC_TARGETS_V1", "HALLMARK_MYC_TARGETS_V2", "HALLMARK_E2F_TARGETS", "HALLMARK_G2M_CHECKPOINT")
uni6 = c("HALLMARK_PROTEIN_SECRETION", "HALLMARK_PEROXISOME")#, "HALLMARK_KRAS_SIGNALING_DN") -> need to get a hold of this
get_ol("SARS CORONAVIRUS NUCLEOCAPSID PROTEIN FROM VIRUS-HOST PPI P-HIPSTER 2020", uni2)
get_ol("SARS CORONAVIRUS NSP4-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020", uni2)
#get_ol("SARS CORONAVIRUS NSP4-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020", uni2)
get_ol("SARS-COV-2/HUMAN INTERACTOME GENE SET FROM GUZZI", uni2)
#get_ol("SARS CORONAVIRUS NSP4-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020", uni2)
#get_ol("SARS-COV-2/HUMAN INTERACTOME GENE SET FROM GUZZI", uni2)
get_ol("COVID19-NSP9 PROTEIN HOST PPI FROM KROGAN", uni2)
get_ol("COVID19-NSP8 PROTEIN HOST PPI FROM KROGAN", uni3)
uni3 = c("HALLMARK_MYC_TARGETS_V1", "HALLMARK_MYC_TARGETS_V2", "HALLMARK_E2F_TARGETS", "HALLMARK_G2M_CHECKPOINT")
get_ol("COVID19-NSP8 PROTEIN HOST PPI FROM KROGAN", uni3)
get_ol("COVID19-NSP8 PROTEIN HOST PPI FROM KROGAN", uni3)
uni3 = c("HALLMARK_MYC_TARGETS_V1", "HALLMARK_MYC_TARGETS_V2", "HALLMARK_E2F_TARGETS", "HALLMARK_G2M_CHECKPOINT")
get_ol("COVID19-NSP8 PROTEIN HOST PPI FROM KROGAN", uni3)
get_ol("SARS CORONAVIRUS LEADER PROTEIN FROM VIRUS-HOST PPI P-HIPSTER 2020", uni6)
get_ol("SARS CORONAVIRUS FORMERLY KNOWN AS GROWTH-FACTOR-LIKE PROTEIN FROM VIRUS-HOST PPI P-HIPSTER 2020", uni6)
uni6 = c("HALLMARK_PROTEIN_SECRETION", "HALLMARK_PEROXISOME", "HALLMARK_KRAS_SIGNALING_DN")
get_ol("SARS CORONAVIRUS LEADER PROTEIN FROM VIRUS-HOST PPI P-HIPSTER 2020", uni6)
get_ol("SARS CORONAVIRUS FORMERLY KNOWN AS GROWTH-FACTOR-LIKE PROTEIN FROM VIRUS-HOST PPI P-HIPSTER 2020", uni6)
get_ol("SARS CORONAVIRUS NSP4-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020", uni2)
get_ol("SARS CORONAVIRUS NUCLEOCAPSID PROTEIN FROM VIRUS-HOST PPI P-HIPSTER 2020", uni2)
get_ol("SARS CORONAVIRUS NSP4-PP1A FROM VIRUS-HOST PPI P-HIPSTER 2020", uni2)
get_ol("COVID19-NSP8 PROTEIN HOST PPI FROM KROGAN", uni3)
get_ol("SARS CORONAVIRUS LEADER PROTEIN FROM VIRUS-HOST PPI P-HIPSTER 2020", uni6)
get_ol("SARS CORONAVIRUS FORMERLY KNOWN AS GROWTH-FACTOR-LIKE PROTEIN FROM VIRUS-HOST PPI P-HIPSTER 2020", uni6)
#get_ol("SARS-COV-2/HUMAN INTERACTOME GENE SET FROM GUZZI", uni2)
get_ol("COVID19-NSP9 PROTEIN HOST PPI FROM KROGAN", uni2)
