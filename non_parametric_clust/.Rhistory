print("hello world")
print("hello world")
print("hello world")
x = c(1,2,3)
y = c(1,2,3)
plot(x,y)
iris
plot(iris$Sepal.Length,iris$Sepal.Width)
install.packages("installr")
library(installr)
BiocManager
plot(1,1)
install.packages("BiocManager")
BiocManager::install('DESeq2')
library( "DESeq2" )
warnings()
R.version
R.version
?BiocManager
BiocManager
library('BiocManager')
BiocManager::install("DESeq2")
.libPaths()
install.packages('DESeq2')
setwd("~/Documents/GitHub/BioinfGroupProject/non_parametric_clust")
y = read.csv("elbow_para.txt", sep = "\t")
y = y$WCSS
x = c(2:10)
#y = c(955486.888094832,889707.495703698,843749.680404026,815371.073186371,788220.554284853,783514.149646629,763837.507496071,758439.367853814,743315.599335635)
plot(x,y, type ='p', main = "Clustering Performance with \n Varying Cluster Centroid Numbers", xlab = "Number of Cluster Centroids (K)", ylab = "WCSS")
model <- lm(y ~ x + I(x^2) + I(x^3))
# I can get the features of this model :
#summary(model)
#model$coefficients
#summary(model)$adj.r.squared
# For each value of x, I can get the value of y estimated by the model, and add it to the current plot !
myPredict <- predict( model )
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=1, lwd=2 )
setwd("~/Documents/GitHub/BioinfGroupProject/non_parametric_clust/k6")
clinDat = read.csv("data_clinical_patient.txt", sep = "\t", skip = 4)
clinNames= clinDat[,1]
clinDat = clinDat[,2:ncol(clinDat)]
name_fix = c()
for(name in clinNames){name_fix = c(name_fix,substr(name,11,nchar(name)))}
rownames(clinDat) = name_fix
num_pie = function(dat, tit){
lbs = unique(dat)
vls = c()
for (lb in lbs){
vls = c(vls, sum(dat== lb))
}
pie(vls, labels = lbs, main = tit)
}
get_prop = function(dat, atrib){
return(length(dat[dat == atrib])/length(dat) * 100)
}
plot_cls = function(clst_num, cdat = clinDat){
clst = as.vector(read.table(paste("c",clst_num,".txt", sep = "")))
clstDat = clinDat[rownames(clinDat) %in% clst$V1,]
par(mfrow=c(3,3))
clst_stat = data.frame(Age = mean(clstDat$AGE, na.rm = T),
EFS = mean(clstDat$EFS_TIME, na.rm=T),
#"% Male" = get_prop(clstDat$SEX, "Male"),
#"% White" = get_prop(clstDat$RACE, "White"),
"% High_Risk" = get_prop(clstDat$RISK_GROUP, "High Risk"),
#"% INSS_Stage_4" = get_prop(clstDat$INSS_STAGE, "Stage 4"),
#"% Unfavourable_Histology" =get_prop(clstDat$TUMOR_SAMPLE_HISTOLOGY, "Unfavorable"),
"% Neuroblastoma_Diagnosis"=get_prop(clstDat$DIAGNOSIS, "Neuroblastoma"))
hist(clstDat$AGE, main = paste("Age cluster", clst_num), breaks = max(clstDat$AGE)-1)
abline(v=median(clstDat$AGE), col = "blue", lwd = 2)
num_pie(clstDat$SEX, tit = paste("Sex cluster", clst_num))
hist(clstDat$EFS_TIME, xlab = "EFS Time (days)", main = paste("EFS Time cluster", clst_num))
abline(v=median(clstDat$EFS_TIME, na.rm = TRUE), col = "blue", lwd = 2)
hist(clstDat$AGE_IN_DAYS, xlab = "Age (days)", main = paste("Age (days) cluster", clst_num))
abline(v = median(clstDat$AGE_IN_DAYS), col = "blue", lwd = 2)
num_pie(clstDat$RACE, tit = paste("Race cluster", clst_num))
num_pie(clstDat$RISK_GROUP, tit = paste("Risk Group", clst_num))
#mtext(paste("Cluster ", clst_num, ":", sep =""), side = 3, line = -21, outer = TRUE)
#par(mfrow = c(1,3))
num_pie(clstDat$INSS_STAGE, tit = paste("INSS STAGE Cluster", clst_num))
num_pie(clstDat$TUMOR_SAMPLE_HISTOLOGY, tit = paste("Tumour Sample Histology Cluster", clst_num))
num_pie(clstDat$DIAGNOSIS, tit = paste("Diagnosis Cluster", clst_num))
return(clst_stat)
}
plot_clusters = function(clst_list){
allclst = data.frame()
for (clst in clst_list){
allclst = rbind(allclst, plot_cls(clst))
}
par(mfrow = c(2,2))
for(atrib in names(allclst)){
barplot(allclst[,atrib], main = atrib, names.arg = clst_list, xlab = "Clusters")
}
return(allclst)
}
pc = plot_clusters(c(1:6))
#plot_clusters(c(1,5,3,4,8,6,2,9,7))
#plot_clusters(c(8,2,1,3,4,5,6,7,9))
write.table(signif(pc,3), 'prognosis.tsv', sep = '\t')
clinDat$RISK_GROUP
count(clinDat$RISK_GROUP)
?count.fields
count.fields(clinDat$RISK_GROUP)
clinDat$RISK_GROUP == "High Risk"
sum(clinDat$RISK_GROUP == "High Risk")
sum(clinDat$RISK_GROUP == "High Risk")/length(clinDat$RISK_GROUP)
#Script used to generate the best k9 clusters determined by computer farm
library('flexclust') # handles weighted clustering
setwd("~/Documents/GitHub/BioinfGroupProject/non_parametric_clust")
#set.seed(255)
#read in and format counts (z_scores)
z_scores = read.csv("data_expression_median.txt", sep = "\t", stringsAsFactors = FALSE, header = TRUE)
map = z_scores[,c(1,2)]
inst_names = colnames(z_scores)[3:length(colnames(z_scores))]
z_scores = z_scores[,-2]
z_scores = as.data.frame(t(z_scores), stringsAsFactors = FALSE)
names(z_scores) = map[,1]
z_scores = z_scores[-1,]
z_scores = as.data.frame(apply(z_scores, 2, as.numeric))
name_fix = c()
for(name in inst_names){name_fix = c(name_fix,substr(name,11,nchar(name)-3))}
row.names(z_scores) = name_fix
#read in ranked file, extract names
ranking = read.csv('ranked_gene_list.tsv', sep = "\t")
rank_scores = ranking$SCORE
ranking = ranking$NAME
rz = z_scores[,colnames(z_scores) %in% ranking] #get genes from count included in ranking
rk = ranking[ranking %in% colnames(z_scores)] # get ranked genes included in counts
rk_score = rank_scores[ranking %in% rk]
rz_order = rz[,rk] # order columns by ranking
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
wg = range01(abs(rk_score))
