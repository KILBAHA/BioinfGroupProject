print("hello world")
print("hello world")
print("hello world")
x = c(1,2,3)
y = c(1,2,3)
plot(x,y)
iris
plot(iris$Sepal.Length,iris$Sepal.Width)
install.packages("installr")
library(installr)
BiocManager
plot(1,1)
install.packages("BiocManager")
BiocManager::install('DESeq2')
library( "DESeq2" )
warnings()
R.version
R.version
?BiocManager
BiocManager
library('BiocManager')
BiocManager::install("DESeq2")
.libPaths()
install.packages('DESeq2')
GSEA_output_filename = "ASGHARZADEH_NEUROBLASTOMA_POOR_SURVIVAL_DN.tsv"
count_filename = "data_expression_median.txt"
output_count_reduced_filename = "nb_poor_survival.csv"
only_core = TRUE #set to false if you want to include all genes in set and not just core enrichment
GE_output = read.csv(GSEA_output_filename, sep = "\t")
GE_output = GE_output[,c("SYMBOL", "CORE.ENRICHMENT")]
if (only_core == TRUE){core = GE_output[GE_output$"CORE.ENRICHMENT"== "Yes",]}
count = read.csv("data_expression_median.txt", sep = "\t")
gene_names = count[,1]
length(gene_names) == length(unique(gene_names))
count = count[,3:ncol(count)]
row.names(count) = gene_names
inst_names = colnames(count)
name_fix = c()
for(name in inst_names){name_fix = c(name_fix,substr(name,11,nchar(name)-3))}
colnames(count) = name_fix
select = count[gene_names %in% core$SYMBOL,]
patient = as.data.frame(read.csv("data_clinical_patient.csv", sep = "\t", stringsAsFactors = FALSE, header = TRUE, skip = 4))
p_nam = patient[,1]
p_nam_fix = c()
for(name in p_nam){p_nam_fix = c(p_nam_fix,substr(name,11,nchar(name)))}
patient = patient[,2:ncol(patient)]
row.names(patient) = p_nam_fix
five_yr = 365*5
patient$EFS_fct = if_else(patient[,"EFS_TIME"] > five_yr, "EFS_G5", "EFS_L5")
setwd("~/Documents/GitHub/BioinfGroupProject/GSEA/ES_Curated_analysis/positive")
GSEA_output_filename = "ASGHARZADEH_NEUROBLASTOMA_POOR_SURVIVAL_DN.tsv"
count_filename = "data_expression_median.txt"
output_count_reduced_filename = "nb_poor_survival.csv"
only_core = TRUE #set to false if you want to include all genes in set and not just core enrichment
GE_output = read.csv(GSEA_output_filename, sep = "\t")
GE_output = GE_output[,c("SYMBOL", "CORE.ENRICHMENT")]
if (only_core == TRUE){core = GE_output[GE_output$"CORE.ENRICHMENT"== "Yes",]}
count = read.csv("data_expression_median.txt", sep = "\t")
gene_names = count[,1]
length(gene_names) == length(unique(gene_names))
count = count[,3:ncol(count)]
row.names(count) = gene_names
inst_names = colnames(count)
name_fix = c()
for(name in inst_names){name_fix = c(name_fix,substr(name,11,nchar(name)-3))}
colnames(count) = name_fix
select = count[gene_names %in% core$SYMBOL,]
patient = as.data.frame(read.csv("data_clinical_patient.csv", sep = "\t", stringsAsFactors = FALSE, header = TRUE, skip = 4))
p_nam = patient[,1]
p_nam_fix = c()
for(name in p_nam){p_nam_fix = c(p_nam_fix,substr(name,11,nchar(name)))}
patient = patient[,2:ncol(patient)]
row.names(patient) = p_nam_fix
five_yr = 365*5
patient$EFS_fct = if_else(patient[,"EFS_TIME"] > five_yr, "EFS_G5", "EFS_L5")
patient$EFS_fct = ifelse(patient[,"EFS_TIME"] > five_yr, "EFS_G5", "EFS_L5")
efs = data.frame(patient[,"EFS_fct"])
row.names(efs) = p_nam_fix
select = t(select)
sel = merge.data.frame(select,efs, by="row.names")
View(sel)
select = merge.data.frame(select,efs, by="row.names")
names(select)
names(select)[length(names(select))]
names(select)[length(names(select))] = "EFS_fct"
names(select)
names(select)[length(names(select))] = "EFS_fct"
select = select[!(select$EFS_fct == NA),]
View(select)
patient = as.data.frame(read.csv("data_clinical_patient.csv", sep = "\t", stringsAsFactors = FALSE, header = TRUE, skip = 4))
p_nam = patient[,1]
p_nam_fix = c()
for(name in p_nam){p_nam_fix = c(p_nam_fix,substr(name,11,nchar(name)))}
patient = patient[,2:ncol(patient)]
row.names(patient) = p_nam_fix
five_yr = 365*5
patient$EFS_fct = ifelse(patient[,"EFS_TIME"] > five_yr, "EFS_G5", "EFS_L5")
efs = data.frame(patient[,"EFS_fct"])
row.names(efs) = p_nam_fix
select = t(select)
select = merge.data.frame(select,efs, by="row.names")
names(select)[length(names(select))] = "EFS_fct"
sel = select[!(select$EFS_fct == "EFS_G5"| select$EFS_fct == "EFS_L5",]
sel = select[!(select$EFS_fct == "EFS_G5"| select$EFS_fct == "EFS_L5"),]
View(sel)
sel = select[(select$EFS_fct == "EFS_G5"| select$EFS_fct == "EFS_L5"),]
sel = select[!(is.na(select$EFS_fct)),]
unique(select$EFS_fct)
select$EFS_fct
patient = as.data.frame(read.csv("data_clinical_patient.csv", sep = "\t", stringsAsFactors = FALSE, header = TRUE, skip = 4))
p_nam = patient[,1]
p_nam_fix = c()
for(name in p_nam){p_nam_fix = c(p_nam_fix,substr(name,11,nchar(name)))}
patient = patient[,2:ncol(patient)]
row.names(patient) = p_nam_fix
five_yr = 365*5
patient$EFS_fct = ifelse(patient[,"EFS_TIME"] > five_yr, "EFS_G5", "EFS_L5")
efs = data.frame(patient[,"EFS_fct"])
row.names(efs) = p_nam_fix
select = t(select)
select = merge.data.frame(select,efs, by="row.names")
View(select)
select = count[gene_names %in% core$SYMBOL,]
patient = as.data.frame(read.csv("data_clinical_patient.csv", sep = "\t", stringsAsFactors = FALSE, header = TRUE, skip = 4))
p_nam = patient[,1]
p_nam_fix = c()
for(name in p_nam){p_nam_fix = c(p_nam_fix,substr(name,11,nchar(name)))}
patient = patient[,2:ncol(patient)]
row.names(patient) = p_nam_fix
five_yr = 365*5
patient$EFS_fct = ifelse(patient[,"EFS_TIME"] > five_yr, "EFS_G5", "EFS_L5")
efs = data.frame(patient[,"EFS_fct"])
row.names(efs) = p_nam_fix
select = t(select)
select = merge.data.frame(select,efs, by="row.names")
names(select)[length(names(select))] = "EFS_fct"
View(select)
unique(select$EFS_fct)
sel = select[!(is.na(select$EFS_fct)),]
is.na(select$EFS_fct)
sum(is.na(select$EFS_fct))
select = select[!(is.na(select$EFS_fct)),]
pos = read.table("pos.txt")
for (p in pos){print(pos)}
pos = read.table("pos.txt")
for (p in pos){print(pos)}
?paste
function(GSEA_output_filename, only_core=TRUE, count_filename="data_expression_median.txt"){
GE_output = read.csv(GSEA_output_filename, sep = "\t")
GE_output = GE_output[,c("SYMBOL", "CORE.ENRICHMENT")]
if (only_core == TRUE){core = GE_output[GE_output$"CORE.ENRICHMENT"== "Yes",]}
count = read.csv("data_expression_median.txt", sep = "\t")
gene_names = count[,1]
length(gene_names) == length(unique(gene_names))
count = count[,3:ncol(count)]
row.names(count) = gene_names
inst_names = colnames(count)
name_fix = c()
for(name in inst_names){name_fix = c(name_fix,substr(name,11,nchar(name)-3))}
colnames(count) = name_fix
select = count[gene_names %in% core$SYMBOL,]
patient = as.data.frame(read.csv("data_clinical_patient.csv", sep = "\t", stringsAsFactors = FALSE, header = TRUE, skip = 4))
p_nam = patient[,1]
p_nam_fix = c()
for(name in p_nam){p_nam_fix = c(p_nam_fix,substr(name,11,nchar(name)))}
patient = patient[,2:ncol(patient)]
row.names(patient) = p_nam_fix
five_yr = 365*5
patient$EFS_fct = ifelse(patient[,"EFS_TIME"] > five_yr, "EFS_G5", "EFS_L5")
efs = data.frame(patient[,"EFS_fct"])
row.names(efs) = p_nam_fix
select = t(select)
select = merge.data.frame(select,efs, by="row.names")
names(select)[length(names(select))] = "EFS_fct"
select = select[!(is.na(select$EFS_fct)),]
write_filename = paste("redfiles",GSEA_output_filename, "_dimred.csv", sep="")
write.csv(select, write_filename)
}
getset = function(GSEA_output_filename, only_core=TRUE, count_filename="data_expression_median.txt"){
GE_output = read.csv(GSEA_output_filename, sep = "\t")
GE_output = GE_output[,c("SYMBOL", "CORE.ENRICHMENT")]
if (only_core == TRUE){core = GE_output[GE_output$"CORE.ENRICHMENT"== "Yes",]}
count = read.csv("data_expression_median.txt", sep = "\t")
gene_names = count[,1]
length(gene_names) == length(unique(gene_names))
count = count[,3:ncol(count)]
row.names(count) = gene_names
inst_names = colnames(count)
name_fix = c()
for(name in inst_names){name_fix = c(name_fix,substr(name,11,nchar(name)-3))}
colnames(count) = name_fix
select = count[gene_names %in% core$SYMBOL,]
patient = as.data.frame(read.csv("data_clinical_patient.csv", sep = "\t", stringsAsFactors = FALSE, header = TRUE, skip = 4))
p_nam = patient[,1]
p_nam_fix = c()
for(name in p_nam){p_nam_fix = c(p_nam_fix,substr(name,11,nchar(name)))}
patient = patient[,2:ncol(patient)]
row.names(patient) = p_nam_fix
five_yr = 365*5
patient$EFS_fct = ifelse(patient[,"EFS_TIME"] > five_yr, "EFS_G5", "EFS_L5")
efs = data.frame(patient[,"EFS_fct"])
row.names(efs) = p_nam_fix
select = t(select)
select = merge.data.frame(select,efs, by="row.names")
names(select)[length(names(select))] = "EFS_fct"
select = select[!(is.na(select$EFS_fct)),]
write_filename = paste("redfiles",GSEA_output_filename, "_dimred.csv", sep="")
write.csv(select, write_filename)
}
pos = read.table("pos.txt")
for (p in pos){getset(p)}
getset = function(GSEA_output_filename, only_core=TRUE, count_filename="data_expression_median.txt"){
GE_output = read.csv(GSEA_output_filename, sep = "\t")
GE_output = GE_output[,c("SYMBOL", "CORE.ENRICHMENT")]
if (only_core == TRUE){core = GE_output[GE_output$"CORE.ENRICHMENT"== "Yes",]}
count = read.csv("data_expression_median.txt", sep = "\t")
gene_names = count[,1]
length(gene_names) == length(unique(gene_names))
count = count[,3:ncol(count)]
row.names(count) = gene_names
inst_names = colnames(count)
name_fix = c()
for(name in inst_names){name_fix = c(name_fix,substr(name,11,nchar(name)-3))}
colnames(count) = name_fix
select = count[gene_names %in% core$SYMBOL,]
patient = as.data.frame(read.csv("data_clinical_patient.csv", sep = "\t", stringsAsFactors = FALSE, header = TRUE, skip = 4))
p_nam = patient[,1]
p_nam_fix = c()
for(name in p_nam){p_nam_fix = c(p_nam_fix,substr(name,11,nchar(name)))}
patient = patient[,2:ncol(patient)]
row.names(patient) = p_nam_fix
five_yr = 365*5
patient$EFS_fct = ifelse(patient[,"EFS_TIME"] > five_yr, "EFS_G5", "EFS_L5")
efs = data.frame(patient[,"EFS_fct"])
row.names(efs) = p_nam_fix
select = t(select)
select = merge.data.frame(select,efs, by="row.names")
names(select)[length(names(select))] = "EFS_fct"
select = select[!(is.na(select$EFS_fct)),]
write_filename = paste("redfiles",GSEA_output_filename, "_dimred.csv", sep="")
write.csv(select, write_filename)
}
pos = read.table("pos.txt")
for (p in pos){getset(p)}
for (p in pos){getset(p)}
getset("ASGHARZADEH_NEUROBLASTOMA_POOR_SURVIVAL_DN.tsv")
pos
pos[1]
for (p in pos) {print(pos)}
for (p in pos) {print(pos)
print("br")}
for (p in pos) {print(p)
print("n")}
pos[2]
pos[1]
pos$V1[1]
pos = read.table("pos.txt")
for (p in pos$V1){getset(p)}
getset = function(GSEA_output_filename, only_core=TRUE, count_filename="data_expression_median.txt"){
GE_output = read.csv(GSEA_output_filename, sep = "\t")
GE_output = GE_output[,c("SYMBOL", "CORE.ENRICHMENT")]
if (only_core == TRUE){core = GE_output[GE_output$"CORE.ENRICHMENT"== "Yes",]}
count = read.csv("data_expression_median.txt", sep = "\t")
gene_names = count[,1]
length(gene_names) == length(unique(gene_names))
count = count[,3:ncol(count)]
row.names(count) = gene_names
inst_names = colnames(count)
name_fix = c()
for(name in inst_names){name_fix = c(name_fix,substr(name,11,nchar(name)-3))}
colnames(count) = name_fix
select = count[gene_names %in% core$SYMBOL,]
patient = as.data.frame(read.csv("data_clinical_patient.csv", sep = "\t", stringsAsFactors = FALSE, header = TRUE, skip = 4))
p_nam = patient[,1]
p_nam_fix = c()
for(name in p_nam){p_nam_fix = c(p_nam_fix,substr(name,11,nchar(name)))}
patient = patient[,2:ncol(patient)]
row.names(patient) = p_nam_fix
five_yr = 365*5
patient$EFS_fct = ifelse(patient[,"EFS_TIME"] > five_yr, "EFS_G5", "EFS_L5")
efs = data.frame(patient[,"EFS_fct"])
row.names(efs) = p_nam_fix
select = t(select)
select = merge.data.frame(select,efs, by="row.names")
names(select)[length(names(select))] = "EFS_fct"
select = select[!(is.na(select$EFS_fct)),]
write_filename = paste("redfiles/",GSEA_output_filename, "_dimred.csv", sep="")
write.csv(select, write_filename)
}
pos = read.table("pos.txt")
for (p in pos$V1){getset(p)}
setwd("~/Documents/GitHub/BioinfGroupProject/GSEA/ES_Curated_analysis/negative")
neg = read.table("neg.txt")
for(n in neg$V1){getset(n)}
print(neg)
for(n in neg$V1){print(n)}
neg = read.table("neg.txt")
for(n in neg$V1){getset(n)}
for(n in neg$V1){getset(n)}
neg = read.table("neg.txt")
for(n in neg$V1){getset(n)}
hist(c(73, 64, 69, 64, 64, 71, 67, 65, 67, 66, 68, 70, 69, 72, 67, 66, 66, 66, 73, 64, 66))
?hist
hist(c(73, 64, 69, 64, 64, 71, 67, 65, 67, 66, 68, 70, 69, 72, 67, 66, 66, 66, 73, 64, 66), breaks=c(1))
hist(c(73, 64, 69, 64, 64, 71, 67, 65, 67, 66, 68, 70, 69, 72, 67, 66, 66, 66, 73, 64, 66), breaks=c(2))
hist(c(73, 64, 69, 64, 64, 71, 67, 65, 67, 66, 68, 70, 69, 72, 67, 66, 66, 66, 73, 64, 66), breaks=c(20))
pos_classification= c(73, 64, 69, 64, 64, 71, 67, 65, 67, 66, 68, 70, 69, 72, 67, 66, 66, 66, 73, 64, 66)
hist(pos_classification, breaks=c(20))
hist(pos_classification, breaks=c(10))
hist(neg_classification, breaks=10)
neg_classification = c(66,69,73,66,67,63,65,66,64,68,66,68,66,69,65,64,68,64,66,65)
hist(neg_classification, breaks=10)
?hist
hist(neg_classification, breaks=10, xlab = "Classification Accuracy")
hist(neg_classification, breaks=10, xlab = "Classification Accuracy", title="j")
hist(neg_classification, breaks=10, xlab = "Classification Accuracy", main="j")
hist(neg_classification, breaks=10, xlab = "Classification Accuracy", main="Histogram of Negative Classification accuracy")
hist(pos_classification, breaks=c(10), xlab = "Classification Accuracy", main = "Histogram of Negative Classification accuracy")
hist(neg_classification, breaks=10, xlab = "Classification Accuracy", main="Histogram of Negative Classification accuracy")
hist(pos_classification, breaks=c(10), xlab = "Classification Accuracy", main = "Histogram of Positive Classification accuracy")
hist(neg_classification, breaks=10, xlab = "Classification Accuracy", main="Histogram of Negative Classification accuracy")
